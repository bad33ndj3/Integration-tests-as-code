// Code generated by mockery v2.16.0. DO NOT EDIT.

package mock

import (
	proto "integrationtest/svc/product/proto"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// CreateProduct provides a mock function with given fields: product
func (_m *Repository) CreateProduct(product *proto.Product) (string, error) {
	ret := _m.Called(product)

	var r0 string
	if rf, ok := ret.Get(0).(func(*proto.Product) string); ok {
		r0 = rf(product)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*proto.Product) error); ok {
		r1 = rf(product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_CreateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProduct'
type Repository_CreateProduct_Call struct {
	*mock.Call
}

// CreateProduct is a helper method to define mock.On call
//   - product *proto.Product
func (_e *Repository_Expecter) CreateProduct(product interface{}) *Repository_CreateProduct_Call {
	return &Repository_CreateProduct_Call{Call: _e.mock.On("CreateProduct", product)}
}

func (_c *Repository_CreateProduct_Call) Run(run func(product *proto.Product)) *Repository_CreateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*proto.Product))
	})
	return _c
}

func (_c *Repository_CreateProduct_Call) Return(_a0 string, _a1 error) *Repository_CreateProduct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetProductById provides a mock function with given fields: id
func (_m *Repository) GetProductById(id string) (*proto.Product, error) {
	ret := _m.Called(id)

	var r0 *proto.Product
	if rf, ok := ret.Get(0).(func(string) *proto.Product); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetProductById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductById'
type Repository_GetProductById_Call struct {
	*mock.Call
}

// GetProductById is a helper method to define mock.On call
//   - id string
func (_e *Repository_Expecter) GetProductById(id interface{}) *Repository_GetProductById_Call {
	return &Repository_GetProductById_Call{Call: _e.mock.On("GetProductById", id)}
}

func (_c *Repository_GetProductById_Call) Run(run func(id string)) *Repository_GetProductById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Repository_GetProductById_Call) Return(_a0 *proto.Product, _a1 error) *Repository_GetProductById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetProducts provides a mock function with given fields:
func (_m *Repository) GetProducts() ([]*proto.Product, error) {
	ret := _m.Called()

	var r0 []*proto.Product
	if rf, ok := ret.Get(0).(func() []*proto.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*proto.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProducts'
type Repository_GetProducts_Call struct {
	*mock.Call
}

// GetProducts is a helper method to define mock.On call
func (_e *Repository_Expecter) GetProducts() *Repository_GetProducts_Call {
	return &Repository_GetProducts_Call{Call: _e.mock.On("GetProducts")}
}

func (_c *Repository_GetProducts_Call) Run(run func()) *Repository_GetProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Repository_GetProducts_Call) Return(_a0 []*proto.Product, _a1 error) *Repository_GetProducts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateProduct provides a mock function with given fields: product
func (_m *Repository) UpdateProduct(product *proto.Product) error {
	ret := _m.Called(product)

	var r0 error
	if rf, ok := ret.Get(0).(func(*proto.Product) error); ok {
		r0 = rf(product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_UpdateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProduct'
type Repository_UpdateProduct_Call struct {
	*mock.Call
}

// UpdateProduct is a helper method to define mock.On call
//   - product *proto.Product
func (_e *Repository_Expecter) UpdateProduct(product interface{}) *Repository_UpdateProduct_Call {
	return &Repository_UpdateProduct_Call{Call: _e.mock.On("UpdateProduct", product)}
}

func (_c *Repository_UpdateProduct_Call) Run(run func(product *proto.Product)) *Repository_UpdateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*proto.Product))
	})
	return _c
}

func (_c *Repository_UpdateProduct_Call) Return(_a0 error) *Repository_UpdateProduct_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
