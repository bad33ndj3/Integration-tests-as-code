// Code generated by mockery v2.16.0. DO NOT EDIT.

package mock

import (
	proto "integrationtest/svc/cart/proto"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// AddCartItem provides a mock function with given fields: userId, productId
func (_m *Repository) AddCartItem(userId string, productId string) error {
	ret := _m.Called(userId, productId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userId, productId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_AddCartItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddCartItem'
type Repository_AddCartItem_Call struct {
	*mock.Call
}

// AddCartItem is a helper method to define mock.On call
//   - userId string
//   - productId string
func (_e *Repository_Expecter) AddCartItem(userId interface{}, productId interface{}) *Repository_AddCartItem_Call {
	return &Repository_AddCartItem_Call{Call: _e.mock.On("AddCartItem", userId, productId)}
}

func (_c *Repository_AddCartItem_Call) Run(run func(userId string, productId string)) *Repository_AddCartItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Repository_AddCartItem_Call) Return(_a0 error) *Repository_AddCartItem_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetCart provides a mock function with given fields: userId
func (_m *Repository) GetCart(userId string) (*proto.Cart, error) {
	ret := _m.Called(userId)

	var r0 *proto.Cart
	if rf, ok := ret.Get(0).(func(string) *proto.Cart); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Cart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetCart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCart'
type Repository_GetCart_Call struct {
	*mock.Call
}

// GetCart is a helper method to define mock.On call
//   - userId string
func (_e *Repository_Expecter) GetCart(userId interface{}) *Repository_GetCart_Call {
	return &Repository_GetCart_Call{Call: _e.mock.On("GetCart", userId)}
}

func (_c *Repository_GetCart_Call) Run(run func(userId string)) *Repository_GetCart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Repository_GetCart_Call) Return(_a0 *proto.Cart, _a1 error) *Repository_GetCart_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// RemoveCartItem provides a mock function with given fields: userId, productId
func (_m *Repository) RemoveCartItem(userId string, productId string) error {
	ret := _m.Called(userId, productId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userId, productId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_RemoveCartItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveCartItem'
type Repository_RemoveCartItem_Call struct {
	*mock.Call
}

// RemoveCartItem is a helper method to define mock.On call
//   - userId string
//   - productId string
func (_e *Repository_Expecter) RemoveCartItem(userId interface{}, productId interface{}) *Repository_RemoveCartItem_Call {
	return &Repository_RemoveCartItem_Call{Call: _e.mock.On("RemoveCartItem", userId, productId)}
}

func (_c *Repository_RemoveCartItem_Call) Run(run func(userId string, productId string)) *Repository_RemoveCartItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Repository_RemoveCartItem_Call) Return(_a0 error) *Repository_RemoveCartItem_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
